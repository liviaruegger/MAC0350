// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/intervals": {
            "post": {
                "description": "Creates an interval with the data provided in the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "intervals"
                ],
                "summary": "Create a new interval",
                "parameters": [
                    {
                        "description": "Interval data",
                        "name": "interval",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateIntervalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Interval successfully created",
                        "schema": {
                            "$ref": "#/definitions/domain.Interval"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Returns a list of all users with their name, email, city, and phone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a user with the provided name, email, city, and phone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data.",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "description": "Returns the user with name, email, city, and phone for the specified email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Invalid email",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Returns the user with name, email, city, and phone for the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the user with the provided ID, name, email, city, and phone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully updated",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the user with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted"
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Interval": {
            "type": "object",
            "properties": {
                "activity_id": {
                    "description": "Foreign key to the swim activity/session",
                    "type": "string"
                },
                "distance": {
                    "description": "Distance in meters",
                    "type": "number"
                },
                "duration": {
                    "description": "Duration of the interval in string format, e.g., \"1h30m\"",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "notes": {
                    "description": "Optional notes like \"felt strong\", \"used fins\"",
                    "type": "string"
                },
                "start_time": {
                    "description": "Start time of the interval",
                    "type": "string"
                },
                "stroke": {
                    "description": "Type of swimming stroke",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.StrokeType"
                        }
                    ]
                },
                "type": {
                    "description": "One of the predefined types",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.IntervalType"
                        }
                    ]
                }
            }
        },
        "domain.IntervalType": {
            "type": "string",
            "enum": [
                "swim",
                "rest",
                "drill",
                "kick",
                "pull",
                "warmup",
                "main_set",
                "cooldown"
            ],
            "x-enum-varnames": [
                "IntervalSwim",
                "IntervalRest",
                "IntervalDrill",
                "IntervalKick",
                "IntervalPull",
                "IntervalWarmUp",
                "IntervalMainSet",
                "IntervalCoolDown"
            ]
        },
        "domain.StrokeType": {
            "type": "string",
            "enum": [
                "freestyle",
                "backstroke",
                "breaststroke",
                "butterfly",
                "medley",
                "unknown"
            ],
            "x-enum-varnames": [
                "StrokeFreestyle",
                "StrokeBackstroke",
                "StrokeBreaststroke",
                "StrokeButterfly",
                "StrokeMedley",
                "StrokeUnknown"
            ]
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "handler.CreateIntervalRequest": {
            "type": "object",
            "required": [
                "activity_id",
                "distance",
                "duration",
                "start_time",
                "stroke",
                "type"
            ],
            "properties": {
                "activity_id": {
                    "description": "ActivityID is the ID of the associated activity/session",
                    "type": "string"
                },
                "distance": {
                    "description": "Distance in meters",
                    "type": "number"
                },
                "duration": {
                    "description": "Duration of the interval in string format, e.g., \"1h30m\"",
                    "type": "string"
                },
                "notes": {
                    "description": "Notes are optional remarks such as \"felt strong\", \"used fins\"",
                    "type": "string"
                },
                "start_time": {
                    "description": "StartTime is the start time of the interval",
                    "type": "string"
                },
                "stroke": {
                    "description": "Stroke is the swimming stroke type like \"freestyle\", \"backstroke\", etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.StrokeType"
                        }
                    ]
                },
                "type": {
                    "description": "Type is one of the predefined interval types like \"swim\", \"rest\", etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.IntervalType"
                        }
                    ]
                }
            }
        },
        "handler.CreateUserRequest": {
            "type": "object",
            "required": [
                "city",
                "email",
                "name",
                "phone"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "handler.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error is a description of what went wrong.\nExample: Service error",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swim Tracker API",
	Description:      "This is an API for tracking swimming",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

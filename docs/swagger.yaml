basePath: /
definitions:
  domain.Activity:
    properties:
      date:
        description: Date in ISO 8601 format, e.g., "2023-10-01"
        type: string
      distance:
        description: Total distance in meters
        type: number
      duration:
        description: Duration of the activity in string format, e.g., "1h30m"
        type: string
      feeling:
        allOf:
        - $ref: '#/definitions/domain.FeelingType'
        description: Optional feeling after the swim, e.g., "tired"
      heart_rate_avg:
        description: Average heart rate during the activity
        type: integer
      heart_rate_max:
        description: Maximum heart rate during the activity
        type: integer
      id:
        description: ID is the unique identifier for the activity (PK)
        type: string
      laps:
        description: Number of pool laps
        type: integer
      location_name:
        description: Optional name for the location, e.g., "CEPE"
        type: string
      location_type:
        allOf:
        - $ref: '#/definitions/domain.LocationType'
        description: '"pool" or "open_water"'
      notes:
        description: Optional notes
        type: string
      pool_size:
        description: Pool length in meters (0 if open water)
        type: number
      start:
        description: Start time of the activity
        type: string
      user_id:
        description: UserID is the ID of the user who performed the activity (FK)
        type: string
    type: object
  domain.FeelingType:
    enum:
    - excellent
    - good
    - regular
    - tired
    - bad
    type: string
    x-enum-varnames:
    - FeelingExcellent
    - FeelingGood
    - FeelingRegular
    - FeelingTired
    - FeelingBad
  domain.Interval:
    properties:
      activity_id:
        description: Foreign key to the swim activity/session
        type: string
      distance:
        description: Distance in meters
        type: number
      duration:
        description: Duration of the interval in string format, e.g., "1h30m"
        type: string
      id:
        type: string
      notes:
        description: Optional notes like "felt strong", "used fins"
        type: string
      stroke:
        allOf:
        - $ref: '#/definitions/domain.StrokeType'
        description: Type of swimming stroke
      type:
        allOf:
        - $ref: '#/definitions/domain.IntervalType'
        description: One of the predefined types
    type: object
  domain.IntervalType:
    enum:
    - swim
    - rest
    - drill
    - kick
    - pull
    - warmup
    - main_set
    - cooldown
    type: string
    x-enum-varnames:
    - IntervalSwim
    - IntervalRest
    - IntervalDrill
    - IntervalKick
    - IntervalPull
    - IntervalWarmUp
    - IntervalMainSet
    - IntervalCoolDown
  domain.LocationType:
    enum:
    - pool
    - open_water
    type: string
    x-enum-varnames:
    - LocationPool
    - LocationOpenWater
  domain.StrokeType:
    enum:
    - freestyle
    - backstroke
    - breaststroke
    - butterfly
    - medley
    - unknown
    type: string
    x-enum-varnames:
    - StrokeFreestyle
    - StrokeBackstroke
    - StrokeBreaststroke
    - StrokeButterfly
    - StrokeMedley
    - StrokeUnknown
  domain.User:
    properties:
      city:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  entity.Activity:
    properties:
      avg_pace_per_100m:
        description: Average pace in seconds per 100 meters, formatted mm:ss
        type: string
      date:
        description: Date in ISO 8601 format, e.g., "2023-10-01"
        type: string
      distance:
        description: Total distance in meters
        type: number
      duration:
        description: Duration of the activity in string format, e.g., "1h30m"
        type: string
      feeling:
        allOf:
        - $ref: '#/definitions/entity.FeelingType'
        description: Optional feeling after the swim, e.g., "tired"
      heart_rate_avg:
        description: Average heart rate during the activity
        type: integer
      heart_rate_max:
        description: Maximum heart rate during the activity
        type: integer
      id:
        description: ID is the unique identifier for the activity (PK)
        type: string
      intervals:
        description: Intervals are the segments of the swim session
        items:
          $ref: '#/definitions/entity.Interval'
        type: array
      laps:
        description: Number of pool laps
        type: integer
      location_name:
        description: Optional name for the location, e.g., "CEPE"
        type: string
      location_type:
        allOf:
        - $ref: '#/definitions/entity.LocationType'
        description: '"pool" or "open_water"'
      notes:
        description: Optional notes
        type: string
      pool_size:
        description: Pool length in meters (0 if open water)
        type: number
      start:
        description: Start time of the activity
        type: string
      user_id:
        description: UserID is the ID of the user who performed the activity (FK)
        type: string
    type: object
  entity.FeelingType:
    enum:
    - excellent
    - good
    - regular
    - tired
    - bad
    type: string
    x-enum-varnames:
    - FeelingExcellent
    - FeelingGood
    - FeelingRegular
    - FeelingTired
    - FeelingBad
  entity.Interval:
    properties:
      activity_id:
        description: Foreign key to the swim activity/session
        type: string
      distance:
        description: Distance in meters
        type: number
      duration:
        description: Duration of the interval in string format, e.g., "1h30m"
        type: string
      id:
        type: string
      notes:
        description: Optional notes like "felt strong", "used fins"
        type: string
      stroke:
        allOf:
        - $ref: '#/definitions/entity.StrokeType'
        description: Type of swimming stroke
      type:
        allOf:
        - $ref: '#/definitions/entity.IntervalType'
        description: One of the predefined types
    type: object
  entity.IntervalType:
    enum:
    - swim
    - rest
    - drill
    - kick
    - pull
    - warmup
    - main_set
    - cooldown
    type: string
    x-enum-varnames:
    - IntervalSwim
    - IntervalRest
    - IntervalDrill
    - IntervalKick
    - IntervalPull
    - IntervalWarmUp
    - IntervalMainSet
    - IntervalCoolDown
  entity.LocationType:
    enum:
    - pool
    - open_water
    type: string
    x-enum-varnames:
    - LocationPool
    - LocationOpenWater
  entity.StrokeType:
    enum:
    - freestyle
    - backstroke
    - breaststroke
    - butterfly
    - medley
    - unknown
    type: string
    x-enum-varnames:
    - StrokeFreestyle
    - StrokeBackstroke
    - StrokeBreaststroke
    - StrokeButterfly
    - StrokeMedley
    - StrokeUnknown
  handler.CreateActivityRequest:
    properties:
      date:
        description: Date in ISO 8601 format, e.g., "2023-10-01"
        type: string
      distance:
        description: Total distance in meters
        type: number
      duration:
        description: |-
          Start time of the activity
          Start time.Time `json:"start"` // TODO - must implement format handling
          Duration of the activity in a string format, e.g., "1h30m"
        type: string
      feeling:
        allOf:
        - $ref: '#/definitions/domain.FeelingType'
        description: Optional feeling after the swim, e.g., "tired"
      heart_rate_avg:
        description: Average heart rate during the activity
        type: integer
      heart_rate_max:
        description: Maximum heart rate during the activity
        type: integer
      laps:
        description: Number of pool laps
        type: integer
      location_name:
        description: Optional name for the location, e.g., "CEPE"
        type: string
      location_type:
        allOf:
        - $ref: '#/definitions/domain.LocationType'
        description: '"pool" or "open_water"'
      notes:
        description: Optional notes
        type: string
      pool_size:
        description: Pool size in meters (0 if open water)
        type: number
      user_id:
        description: ID of the user who performed the activity
        type: string
    required:
    - date
    - distance
    - duration
    - laps
    - location_type
    - pool_size
    - user_id
    type: object
  handler.CreateIntervalRequest:
    properties:
      activity_id:
        description: ActivityID is the ID of the associated activity/session
        type: string
      distance:
        description: Distance in meters
        type: number
      duration:
        description: Duration of the interval in string format, e.g., "1h30m"
        type: string
      notes:
        description: Notes are optional remarks such as "felt strong", "used fins"
        type: string
      stroke:
        allOf:
        - $ref: '#/definitions/domain.StrokeType'
        description: Stroke is the swimming stroke type like "freestyle", "backstroke",
          etc.
      type:
        allOf:
        - $ref: '#/definitions/domain.IntervalType'
        description: Type is one of the predefined interval types like "swim", "rest",
          etc.
    required:
    - activity_id
    - distance
    - duration
    - stroke
    - type
    type: object
  handler.CreateUserRequest:
    properties:
      city:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - city
    - email
    - name
    - phone
    type: object
  handler.ErrorResponse:
    properties:
      error:
        description: |-
          Error is a description of what went wrong.
          Example: Service error
        type: string
    type: object
  handler.GetActivitiesByUserResponse:
    properties:
      activities:
        items:
          $ref: '#/definitions/entity.Activity'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an API for tracking swimming
  title: Swim Tracker API
  version: "1.0"
paths:
  /activities:
    get:
      consumes:
      - application/json
      description: Retrieves all swim activities in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of all activities
          schema:
            items:
              $ref: '#/definitions/domain.Activity'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all activities
      tags:
      - activities
    post:
      consumes:
      - application/json
      description: Creates a swim activity for a specific user
      parameters:
      - description: Activity data
        in: body
        name: activity
        required: true
        schema:
          $ref: '#/definitions/handler.CreateActivityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Activity successfully created
          schema:
            $ref: '#/definitions/domain.Activity'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new activity
      tags:
      - activities
  /intervals:
    post:
      consumes:
      - application/json
      description: Creates an interval with the data provided in the request body
      parameters:
      - description: Interval data
        in: body
        name: interval
        required: true
        schema:
          $ref: '#/definitions/handler.CreateIntervalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Interval successfully created
          schema:
            $ref: '#/definitions/domain.Interval'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new interval
      tags:
      - intervals
  /users:
    get:
      consumes:
      - application/json
      description: Returns a list of all users with their name, email, city, and phone
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a user with the provided name, email, city, and phone
      parameters:
      - description: User data.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the user with the specified ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User successfully deleted
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Returns the user with name, email, city, and phone for the specified
        ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the user with the provided ID, name, email, city, and phone
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully updated
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an existing user
      tags:
      - users
  /users/{user_id}/activities:
    get:
      consumes:
      - application/json
      description: Retrieves all swim activities and their intervals for a given user
        ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.GetActivitiesByUserResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found or no activities
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all activities of a user
      tags:
      - activities
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Returns the user with name, email, city, and phone for the specified
        email
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid email
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get user by email
      tags:
      - users
swagger: "2.0"

basePath: /
definitions:
  domain.Interval:
    properties:
      activity_id:
        description: Foreign key to the swim activity/session
        type: integer
      distance:
        description: Distance in meters
        type: number
      duration:
        description: Duration of the interval in string format, e.g., "1h30m"
        type: string
      id:
        type: integer
      notes:
        description: Optional notes like "felt strong", "used fins"
        type: string
      start_time:
        description: Start time of the interval
        type: string
      stroke:
        allOf:
        - $ref: '#/definitions/domain.StrokeType'
        description: Type of swimming stroke
      type:
        allOf:
        - $ref: '#/definitions/domain.IntervalType'
        description: One of the predefined types
    type: object
  domain.IntervalType:
    enum:
    - swim
    - rest
    - drill
    - kick
    - pull
    - warmup
    - main_set
    - cooldown
    type: string
    x-enum-varnames:
    - IntervalSwim
    - IntervalRest
    - IntervalDrill
    - IntervalKick
    - IntervalPull
    - IntervalWarmUp
    - IntervalMainSet
    - IntervalCoolDown
  domain.StrokeType:
    enum:
    - freestyle
    - backstroke
    - breaststroke
    - butterfly
    - medley
    - unknown
    type: string
    x-enum-varnames:
    - StrokeFreestyle
    - StrokeBackstroke
    - StrokeBreaststroke
    - StrokeButterfly
    - StrokeMedley
    - StrokeUnknown
  domain.User:
    properties:
      city:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        description: |-
          Error is a description of what went wrong.
          Example: Service error
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an API for tracking swimming
  title: Swim Tracker API
  version: "1.0"
paths:
  /intervals:
    post:
      consumes:
      - application/json
      description: Creates an interval with the data provided in the request body
      parameters:
      - description: Interval data
        in: body
        name: interval
        required: true
        schema:
          $ref: '#/definitions/domain.Interval'
      produces:
      - application/json
      responses:
        "201":
          description: Interval successfully created
          schema:
            $ref: '#/definitions/domain.Interval'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new interval
      tags:
      - intervals
  /users:
    post:
      consumes:
      - application/json
      description: Creates a user with the provided name, email, city, and phone
      parameters:
      - description: User data.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Returns the user with name, email, city, and phone for the specified
        ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
swagger: "2.0"
